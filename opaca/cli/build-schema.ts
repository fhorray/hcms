#!/usr/bin/env node
import fs from "fs";
import path from "path";
import { pathToFileURL } from "url";
import { OpacaBuiltConfig } from "@opaca/types/config";

async function loadUserConfig() {
  const root = process.cwd();
  const candidates = [
    "opaca.config.ts",
    "opaca.config.js",
    "opaca.config.mjs",
    "opaca.config.cjs",
  ].map((p) => path.join(root, p));

  const file = candidates.find((p) => fs.existsSync(p));
  if (!file) {
    throw new Error("Could not find opaca.config.{ts,js,mjs,cjs} in project root.");
  }
  const mod = await import(pathToFileURL(file).href);
  return mod.default ?? mod.config ?? mod.buildConfig ?? mod;
}

export async function main() {
  const config = await loadUserConfig() as OpacaBuiltConfig;

  const lines: string[] = [];
  lines.push(`// AUTO-GENERATED BY OPACA â€” do not edit manually`);
  lines.push(`// Instead edit your collections and run \`opaca dev\``);
  lines.push(`import { client } from "@opaca-config";`);
  lines.push(`import { buildDrizzleTable } from "@opaca/db/builder/build";`);

  const dialect = config.database?.dialect || process.env.OPACA_DB_DIALECT;
  const schemaDir = config.database?.schemaDir || "./schema.ts";

  // if (dialect === "d1" || dialect === "sqlite") {
  //   lines.push(`import * as defaultSchema from "./default-sqlite";`);
  // } else {
  //   lines.push(`import * as defaultSchema from "./default-pg";`);
  // }

  for (const col of Object.values(config.collections)) {
    lines.push(
      `export const ${col.slug} = buildDrizzleTable(config.collections["${col.slug}"], "${dialect}");`
    );
  }

  // lines.push(`export const { sessions, accounts, verifications } = defaultSchema;`);

  const outPath = path.join(process.cwd(), schemaDir ?? "schema.ts");
  fs.mkdirSync(path.dirname(outPath), { recursive: true });
  fs.writeFileSync(outPath, lines.join("\n"));
  console.log(`[opaca] schema generated -> ${outPath}`);
}

main().catch((err) => {
  console.error("[opaca] schema build failed:");
  console.error(err instanceof Error ? err.message : err);
  process.exit(1);
});